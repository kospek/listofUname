"""
This program generates a list of usernames using Forename, Middlename
and Lastname as parts of Username.
"""
__author__ = "Kostiantyn Pekarchuk <kospek11@gmail.com>"
__date__ = "15 june 2020"


import os, csv, sys, errno


def readFile(filePath):
    """
    Reads file from path and returns its content as a list.
    
    :param filePath: The path to file with custom delimiter ':'
    :type filePath: str
    :return content: Returns list object with file content
    :rtype: list
    """

    if os.path.isfile(filePath):
        with open(filePath, 'r', encoding='UTF8') as f:
            reader = csv.reader(f, delimiter=':')
            content=[]
            for line in reader:
                content.append(line)
        return content
    else:
        raise FileNotFoundError(errno.ENOENT, 'Input file does not exist', filePath)

#Generating username from first name, middle name and last name.
def generateUserName(row, setOfUserNames):
    """
    Generates username based on users First, Middle and Last Names.
    
    :param row: One row from 'content' list
    :param setOfUserNames: Set object where all existing unique Usernames are stored
    :type row: list
    :type setOfUserName: set
    :return userName: Returns new unique Username
    :rtype: str
    """

    userName = ''
    userName += row[1][0].lower()
    if row[2] != '':
        userName += row[2][0].lower()
    userName += row[3].lower()
    if len(userName) > 8:
        userName = userName[:8]
    
    i = 1
    while userName in setOfUserNames:
        userName = userName[:8]
        userName += str(i)
        i += 1
    setOfUserNames.add(userName)
    return userName

def validateOneRow(row):
    """
    Validates if processed row is in correct format.

    :param row: One row from 'content' list
    :type row: list
    :return False, Index: Returns False if validation fails and column index with an error
    :return True, -1: Returns True and -1 if validation was successful
    :rtype: bool, int
    """

    if not row[0].isdigit():
        return False, 0
    if not row[1].isalpha() or not row[1][0].isupper():
        return False, 1
    if row[2] != '':
        if not row[2].isalpha() or not row[2][0].isupper():
            return False, 2
    if not row[3].isalpha() or not row[3][0].isupper():
        return False, 3
    if not row[4].isalpha() or not row[4][0].isupper():
        return False, 4
    
    return True, -1

def parseFile(fileContent, setOfUserNames):
    """
    Parses input file and returns list with initial data and generated usernames.

    :param fileContent: List object with file content, generated by readFile() function
    :param setOfUserNames: Set object where all existing unique Usernames are stored
    :type fileContent: list
    :type setOfUserName: set
    :return result: Returns list of rows from input file with generated Usernames 
    :rtype: list
    """
    
    result = []
    for row in fileContent:
        rowIsCorrect, rowInvalidValueIndex = validateOneRow(row)
        if rowIsCorrect:
            userName = generateUserName(row, setOfUserNames)
            row.insert(1, userName)
        else:
            row[rowInvalidValueIndex] = 'IncorrectValue'
            row.insert(1, '')
        result.append(row)
    return result

def writeToOutputFile(result, outputFile):
    """
    Exports result list to file.

    :param result: List of rows from input file with generated Usernames 
    :param outputFile: Output file Name
    :type result: list
    :type outputFile: str
    """
    
    with open(outputFile, 'a', encoding='UTF8', newline='') as f:
        for row in result:
            writer = csv.writer(f, delimiter=':')
            writer.writerow(row)

def main(argv):
    """
    Main function is a program entry point. Analyzes cmd arguments.

    :param argv: List of arguments from command line
    :type argv: list
    """

    if argv[0] in ("-h", "--help"):
        print('ugen.py –o [output file] [input file]...')
        sys.exit(2)
    elif argv[0] in ("-o", "--output"):
        outputFile = argv[1]
        inputFiles = argv[2:]
    else:
        print('ugen.py –o [output file] [input file]...')
        sys.exit(2)
    
    setOfUserNames = set()         
    
    if os.path.isfile(outputFile):
        os.remove(outputFile)
    
    for f in inputFiles:
        fileContent = readFile(f)
        result = parseFile(fileContent, setOfUserNames)
        writeToOutputFile(result, outputFile)

if __name__ == "__main__":
   main(sys.argv[1:])